{"version":3,"sources":["img/logo.svg","Components/Gif.jsx","Components/GifLists.jsx","Components/SearchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gif","gif","styles","gifContainer","height","width","images","downsized_large","bgImg","background","url","className","style","title","GifLists","gifs","map","element","SearchBar","onInputChange","onSearchClick","onInput","type","onClick","App","props","handleLoadGifs","query","console","log","fetch","process","then","res","json","results","setState","data","event","target","value","state","undefined","this","method","mode","cache","elephant","image","src","logo","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,wOCyB5BC,MAvBf,YAAuB,IAARC,EAAO,EAAPA,IACPC,EAAS,CACbC,aAAc,CACZC,OAAQ,QACRC,MAAM,GAAD,OAAKJ,EAAIK,OAAOC,gBAAgBF,MAAhC,OAEPG,MAAO,CACLC,WAAW,sFAAD,OAAwFR,EAAIK,OAAOC,gBAAgBG,IAAnH,KACVL,MAAO,OACPD,OAAQ,SAMZ,OACE,yBAAKO,UAAU,gBAAgBC,MAAOV,EAAOC,cAC3C,yBAAKQ,UAAU,YAAYC,MAAOV,EAAOM,QACzC,wBAAIG,UAAU,aAAaV,EAAIY,S,MCPtBC,MATf,YAA6B,IAATC,EAAQ,EAARA,KAClB,OACE,yBAAKJ,UAAU,YACZI,EAAKC,KAAI,SAAAC,GACR,OAAO,kBAAC,EAAD,CAAKhB,IAAKgB,S,sBCKVC,MAVf,YAAsD,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,cAClC,OACE,yBAAKT,UAAU,UACb,2BAAOU,QAASF,EAAeR,UAAU,cAAcW,KAAK,SAC5D,4BAAQC,QAASH,EAAeT,UAAU,iBACxC,uBAAGA,UAAU,oBC4ENa,E,YA3Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA0BRC,eAAiB,SAAAC,GACfC,QAAQC,IAAI,aACZC,MAAM,gDAAD,OAC6CC,mCAD7C,cACkFJ,EADlF,cAGFK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZrB,KAAMoB,EAAQE,WAnCH,EAyCnBlB,cAAgB,SAAAmB,GACd,EAAKF,SAAS,CACZT,MAAOW,EAAMC,OAAOC,SA3CL,EAgDnBpB,cAAgB,WACd,EAAKM,eAAe,EAAKe,MAAMd,QA/C/B,EAAKc,MAAQ,CACX1B,UAAM2B,EACNf,MAAO,YAJQ,E,iFAQE,IAAD,OAMlBgB,KAAKjB,eAAeiB,KAAKF,MAAMd,OAC/BG,MACE,mFAPW,CACXc,OAAQ,MACRC,KAAM,OACNC,MAAO,YAONd,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAEW,SAAUZ,IAC1BP,QAAQC,IAAI,EAAKY,MAAMM,SAAS,GAAGC,Y,+BA8B/B,IAAD,OACCjC,EAAS4B,KAAKF,MAAd1B,KACR,OACE,6BACE,4BAAQJ,UAAU,eAChB,yBACEA,UAAU,OACVsC,IAAKC,IACLC,IAAI,OACJ5B,QAAS,kBAAM,EAAKG,eAAe,YAErC,kBAAC,EAAD,CACEP,cAAewB,KAAKxB,cACpBC,cAAeuB,KAAKvB,iBAIvBL,EAAO,kBAAC,EAAD,CAASA,KAAMA,IAAWa,QAAQC,IAAI,mB,GAtEpCuB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.dddbe3ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a4e3d271.svg\";","import React from \"react\";\n\nfunction Gif({ gif }) {\n  const styles = {\n    gifContainer: {\n      height: \"250px\",\n      width: `${gif.images.downsized_large.width}px`\n    },\n    bgImg: {\n      background: `linear-gradient(0deg, rgba(2,0,36,1) 0%, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 50%), url(${gif.images.downsized_large.url})`,\n      width: \"100%\",\n      height: \"100%\"\n      // backgroundPosition: \"center\",\n      // backgroundImageSize: \"cover\"\n      // backgroundRepeat: \"no-repeat\"\n    }\n  };\n  return (\n    <div className=\"gif-container\" style={styles.gifContainer}>\n      <div className=\"gif-image\" style={styles.bgImg} />\n      <h3 className=\"gif-title\">{gif.title}</h3>\n    </div>\n  );\n}\n\nexport default Gif;\n","import React from \"react\";\nimport Gif from \"./Gif\";\nimport \"./gif.css\";\n\nfunction GifLists({ gifs }) {\n  return (\n    <div className=\"gif-list\">\n      {gifs.map(element => {\n        return <Gif gif={element} />;\n      })}\n    </div>\n  );\n}\nexport default GifLists;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nfunction SearchBar({ onInputChange, onSearchClick }) {\n  return (\n    <div className=\"search\">\n      <input onInput={onInputChange} className=\"search-term\" type=\"text\" />\n      <button onClick={onSearchClick} className=\"search-button\">\n        <i className=\"fa fa-search\"></i>\n      </button>\n    </div>\n  );\n}\nexport default SearchBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport GifList from \"./Components/GifLists\";\nimport logo from \"./img/logo.svg\";\nimport SearchBar from \"./Components/SearchBar\";\n\n// OD3oGfqxgGh8SZtwK6u0XHQtkSQef8N4\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gifs: undefined,\n      query: \"lol cats\"\n    };\n  }\n\n  componentDidMount() {\n    var myInit = {\n      method: \"GET\",\n      mode: \"cors\",\n      cache: \"default\"\n    };\n    this.handleLoadGifs(this.state.query);\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/https://elephant-api.herokuapp.com/elephants\",\n      myInit\n    )\n      .then(res => res.json())\n      .then(results => {\n        this.setState({ elephant: results });\n        console.log(this.state.elephant[0].image);\n      });\n  }\n\n  // function that load the gifs\n  handleLoadGifs = query => {\n    console.log(\"load gifs\");\n    fetch(\n      `https://api.giphy.com/v1/gifs/search?api_key=${process.env.REACT_APP_API_GIPHY}&q=${query}&limit=10`\n    )\n      .then(res => res.json())\n      .then(results => {\n        this.setState({\n          gifs: results.data\n        });\n      });\n  };\n\n  // function that manage the user input\n  onInputChange = event => {\n    this.setState({\n      query: event.target.value\n    });\n  };\n\n  //function manage the click\n  onSearchClick = () => {\n    this.handleLoadGifs(this.state.query);\n  };\n\n  render() {\n    const { gifs } = this.state;\n    return (\n      <div>\n        <header className=\"main-header\">\n          <img\n            className=\"logo\"\n            src={logo}\n            alt=\"logo\"\n            onClick={() => this.handleLoadGifs(\"hello\")}\n          />\n          <SearchBar\n            onInputChange={this.onInputChange}\n            onSearchClick={this.onSearchClick}\n          />\n        </header>\n\n        {gifs ? <GifList gifs={gifs} /> : console.log(\"loading...\")}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}